global
    log /dev/log local1 info

defaults
    mode http
    fullconn 1000
    log global
    option httplog
    timeout connect 10s
    timeout client 30s
    timeout server 30s

crt-store web
    crt-base "/var/lib/acme"
    key-base "/var/lib/acme"
    load crt "altijd.moe/cert.pem" key "altijd.moe/key.pem" alias "altijd.moe"
    load crt "operand.be/cert.pem" key "operand.be/key.pem" alias "operand.be"

backend kanidm
    option forwardfor
    server kanidm 127.0.0.1:8443 ssl ca-file "/etc/ssl/certs/ca-certificates.crt" verify required # Kanidm always requires TLS. We don't use verify none because it should have valid certs.

backend oauth2-proxy
    option forwardfor

    http-request add-header X-Real-IP %[src]

    # CORS to fix actualbudget redirect not working
    http-request lua.cors "GET" "budget.altijd.moe" "*"
    http-response lua.cors

    server oauth2-proxy 127.0.0.1:8442

backend actualbudget
    # Check for group access
    http-request lua.auth-request oauth2-proxy /oauth2/auth?allowed_groups=budget@idm.altijd.moe
    http-request deny if ! { var(txn.auth_response_successful) -m bool }

    # Note: no forwardfor as this breaks header login!
    # Potentially fixed by https://github.com/actualbudget/actual-server/pull/499
    http-request add-header X-Actual-Password actual # autologin

    server actualbudget 127.0.0.1:5006

backend nginx_web
    option forwardfor
    server nginx 127.0.0.1:2080

# HTTP
frontend web
    bind [::]:80 v4v6

    acl is_acme path_beg /.well-known/acme-challenge/
    acl is_static req.hdr(host) -i operand.be www.operand.be altijd.moe www.altijd.moe ik.ben.altijd.moe

    # Redirect HTTP to HTTPS if it's not acme or static
    http-request redirect scheme https if !is_acme !is_static

    # Redirect to nginx for ACME challenges
    use_backend nginx_web if is_acme
    # Top level domains go to nginx serving a static site
    use_backend nginx_web if is_static

# HTTPS
frontend webs
    bind [::]:443 v4v6 ssl crt "@web/altijd.moe" #crt "@web/operand.be"

    ## ACLs
    # Public
    acl is_acme path_beg /.well-known/acme-challenge/
    acl is_static req.hdr(host) -i operand.be www.operand.be altijd.moe www.altijd.moe ik.ben.altijd.moe
    acl is_kanidm req.hdr(host) -i idm.altijd.moe
    acl is_o2proxy req.hdr(host) -i auth.altijd.moe

    # Requires auth
    acl is_budget req.hdr(host) -i budget.altijd.moe

    # Combine all sites that require auth
    acl req_auth req.hdr(host) -i budget.altijd.moe

    # misc
    acl auth_success var(txn.auth_response_successful) -m bool

    # Authenticate using oauth2-proxy if needed                             Headers to copy on
    #                               Backend         Path            Method  Request Success     Failure
    http-request lua.auth-intercept oauth2-proxy    /oauth2/auth    HEAD    *       Set-Cookie  -       if req_auth
    # Redirect to login page if not
    http-request redirect location https://auth.altijd.moe/oauth2/sign_in?rd=%[url] unless auth_success || is_o2proxy || is_acme || is_static || is_kanidm

    # Redirect to nginx for ACME challenges
    use_backend nginx_web if is_acme

    # Top level domains go to nginx serving a static site
    use_backend nginx_web if is_static

    # Kanidm
    use_backend kanidm if is_kanidm

    # OAuth2-proxy
    use_backend oauth2-proxy if is_o2proxy

    # Applications behind oauth2-proxy
    use_backend actualbudget if is_budget auth_success
