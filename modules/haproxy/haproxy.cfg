defaults
    mode http
    fullconn 1000

crt-store web
    crt-base "/var/lib/acme/"
    key-base "/var/lib/acme/"
    load crt "altijd.moe/cert.pem" key "altijd.moe/key.pem" alias "altijd.moe"
    load crt "operand.be/cert.pem" key "operand.be/key.pem" alias "operand.be"

backend kanidm
        server kanidm 127.0.0.1:8443 ssl verify required # Kanidm always requires TLS. We don't use verify none because it should have valid certs.

backend oauth2-proxy
        http-request add-header X-Real-IP %[src]
        http-request add-header X-Forwarded-Uri %[req.uri]
        http-request add-header X-Auth-Request-Redirect %[url]
        server oauth2-proxy 127.0.0.1:8442

backend actualbudget
        server actual 127.0.0.1:4001

backend nginx_web
        server nginx 127.0.0.1:2080

frontend web
        bind [::]:80  v4v6
        bind [::]:443 v4v6 ssl crt "@web/altijd.moe" crt "@web/operand.be"

        # Top level domains go to nginx serving a static site
        use_backend nginx_web if { req.hdr(host) -i altijd.moe } or { req.hdr(host) -i operand.be }

        # Redirect HTTP to HTTPS (i.e. all below this are HTTPS-only)
        http-request redirect scheme https unless { ssl_fc }

        # Kanidm
        use_backend kanidm if { req.hdr(host) -i idm.altijd.moe }

        # OAuth2-proxy
        use_backend oauth2-proxy if { req.hdr(host) -i auth.altijd.moe }

        # Authenticate using oauth2-proxy                                       Headers to copy on
        #                               Backend         Path            Method  Request Success     Failure
        http-request lua.auth-intercept oauth2-proxy    /oauth2/auth    HEAD    *       Set-Cookie  -
        # Redirect to login page if not
        http-request redirect location https://auth.altijd.moe/oauth2/sign_in unless { var(txn.auth_response_successful) -m bool }

        # Applications behind oauth2-proxy
        use_backend actualbudget if { req.hdr(host) -i budget.altijd.moe }

        default_backend nginx_web
